name: Periksa Artikel Uji

on:
  schedule:
    - cron: '0 * * * *'
  push:
    paths:
      - 'ajax-jquery/sabdaliterasi.shop/update.txt'
  workflow_dispatch:

jobs:
  check_draft_articles:
    runs-on: ubuntu-latest
    defaults:
          run:
           shell: pwsh
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: PowerShell Module Cache
      uses: potatoqualitee/psmodulecache@v5.2
      with:
        modules-to-cache: powershell-yaml

    - name: Rename Draft Articles
      id: rename_drafts_artikel
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE
        .github/scripts/artikel.ps1
        
    - name: Rename Draft AMP
      id: rename_drafts_amp
      run: |
        Set-Location -Path $env:GITHUB_WORKSPACE
        .github/scripts/amp.ps1

    - name: Check for New Articles to Publish
      id: check_articles_to_publish
      run: |
        if ([System.Convert]::ToBoolean($env:DRAFTS_ARTICLES_RENAMED)) {
          'Found and renamed at least one draft article requiring the site to be published.'
          'PUBLISH_ARTICLES=true' >> $env:GITHUB_OUTPUT
        } else {
          'No articles matched the criteria to be renamed and published.'
          'PUBLISH_ARTICLES=false' >> $env:GITHUB_OUTPUT
        }

    - name: Import GPG
      uses: crazy-max/ghaction-import-gpg@v5.2.0
      if: steps.check_articles_to_publish.outputs.PUBLISH_ARTICLES == 'true'
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
        passphrase: ${{ secrets.PASSPHRASE }}
        git_user_signingkey: true
        git_commit_gpgsign: true

    - name: Create Pull Request
      uses: peter-evans/create-pull-request@v4.2.4
      if: steps.check_articles_to_publish.outputs.PUBLISH_ARTICLES == 'true'
      with:
        commit-message: publish draft article
        committer: ${{ vars.GIT_USER_NAME }} <${{ vars.GIT_USER_EMAIL }}>
        branch: Artikel
        title: Create Pull Request
        body: Create pull request to publish renamed article
        delete-branch: true

    - name: Find Pull Request
      uses: juliangruber/find-pull-request-action@v1.8.0
      if: steps.check_articles_to_publish.outputs.PUBLISH_ARTICLES == 'true'
      id: find-pull-request
      with:
        branch: Artikel

    - name: Merge Pull Request
      id: merge-pull-request
      uses: juliangruber/merge-pull-request-action@v1.1.0
      if: steps.check_articles_to_publish.outputs.PUBLISH_ARTICLES == 'true'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        number: ${{ steps.find-pull-request.outputs.number }}
        method: merge
        
  build:
    name: Build Jekyll
    runs-on: ubuntu-latest
    needs: check_draft_articles
    steps:
      - uses: actions/checkout@v3
      - name: Build the site in the jekyll/builder container
        run: |
          export JEKYLL_VERSION=4.0
          docker run \
          -v ${{ github.workspace }}:/srv/jekyll -v ${{ github.workspace }}/_site:/srv/jekyll/_site \
          -e PAGES_REPO_NWO=${{ github.repository }} \
          jekyll/builder:$JEKYLL_VERSION /bin/bash -c "chmod 777 /srv/jekyll && jekyll build --future"

  apply:
    runs-on: ubuntu-latest
    needs: build
    permissions:
        contents: read
        pages: write
        id-token: write
    concurrency:
        group: "pages"
        cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@8575951200e472d5f2d95c625da0c7bec8217c42 # v1.161.0
        with:
          ruby-version: '3.1' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v2

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    permissions:
        contents: read
        pages: write
        id-token: write
    concurrency:
        group: "pages"
        cancel-in-progress: false
    needs: apply
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3
