name: Scheduled Publish

on:
  schedule:
    - cron: '0 * * * *'  # Jalankan setiap jam
  workflow_dispatch:

jobs:
  check_draft_articles:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Publish Scheduled Files
        env:
          TZ: Asia/Makassar  # Mengatur zona waktu ke Asia/Makassar
        run: |
          # Definisikan waktu saat ini
          CURRENT_DATE=$(date +"%Y-%m-%d %H:%M:%S %z")
          echo -e "\n\033[1;36mWaktu sekarang: $CURRENT_DATE\033[0m\n"

          # Variabel untuk menyimpan jumlah file terpublish dan terjadwal
          drafts_publish_count=0
          drafts_schedule_count=0
          draftsamp_publish_count=0
          draftsamp_schedule_count=0

          # Fungsi untuk memeriksa dan memindahkan file jika waktu sesuai
          move_file_if_scheduled() {
            local src_file="$1"
            local dest_folder="$2"
            local date_in_file=$(grep "date: '" "$src_file" | awk -F"'" '{print $2}')
            
            # Bandingkan waktu dalam file dengan waktu saat ini
            if [[ "$date_in_file" < "$CURRENT_DATE" ]] || [[ "$date_in_file" == "$CURRENT_DATE" ]]; then
              # Pindahkan file ke folder tujuan
              if [[ "$dest_folder" == "_artikel" ]]; then
                dest_file=$(echo "$src_file" | sed "s|_drafts/|_artikel/|")
                drafts_publish_count=$((drafts_publish_count + 1))
              elif [[ "$dest_folder" == "_amp" ]]; then
                dest_file=$(echo "$src_file" | sed "s|_draftsamp/|_amp/|")
                draftsamp_publish_count=$((draftsamp_publish_count + 1))
              fi
              mkdir -p "$(dirname "$dest_file")"
              mv "$src_file" "$dest_file"
              echo -e "\033[1;32mFile $src_file dipindahkan ke $dest_file (Terpublish)\033[0m"
            else
              if [[ "$dest_folder" == "_artikel" ]]; then
                drafts_schedule_count=$((drafts_schedule_count + 1))
              elif [[ "$dest_folder" == "_amp" ]]; then
                draftsamp_schedule_count=$((draftsamp_schedule_count + 1))
              fi
              echo -e "\033[1;33mFile $src_file dijadwalkan untuk masa mendatang: $date_in_file\033[0m"
            fi
          }

          # Laporan terpisah untuk folder _drafts
          echo -e "\033[1;34mMemeriksa folder _drafts:\033[0m"
          for file in _drafts/*.md; do
            [ -e "$file" ] || continue
            move_file_if_scheduled "$file" "_artikel"
          done

          # Laporan akhir untuk folder _drafts
          echo -e "\033[1;32mTotal file terpublish di _drafts: $drafts_publish_count\033[0m"
          echo -e "\033[1;33mTotal file terjadwal di masa depan di _drafts: $drafts_schedule_count\033[0m"

          # Laporan terpisah untuk folder _draftsamp
          echo -e "\033[1;34mMemeriksa folder _draftsamp:\033[0m"
          for file in _draftsamp/*.md; do
            [ -e "$file" ] || continue
            move_file_if_scheduled "$file" "_amp"
          done

          # Laporan akhir untuk folder _draftsamp
          echo -e "\033[1;32mTotal file terpublish di _draftsamp: $draftsamp_publish_count\033[0m"
          echo -e "\033[1;33mTotal file terjadwal di masa depan di _draftsamp: $draftsamp_schedule_count\033[0m"

          # Memastikan isi folder tujuan setelah pemindahan
          echo -e "\033[1;36mIsi folder _artikel setelah pemindahan:\033[0m"
          ls -l _artikel || echo "_artikel folder is empty."

          echo -e "\033[1;36mIsi folder _amp setelah pemindahan:\033[0m"
          ls -l _amp || echo "_amp folder is empty."

          # Set environment variable untuk menandakan jika ada file yang dipublish
          if (( drafts_publish_count > 0 || draftsamp_publish_count > 0 )); then
            echo "HAS_PUBLISHED_FILES=true" >> $GITHUB_ENV
          else
            echo "HAS_PUBLISHED_FILES=false" >> $GITHUB_ENV
          fi

      - name: Commit and Push Changes
        if: env.HAS_PUBLISHED_FILES == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Cek status git untuk melihat apakah ada perubahan
          git status

          # Jika ada perubahan, lakukan commit dan push
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "Publish scheduled articles"
            git push
            echo "Perubahan berhasil dicommit dan dipush."
          else
            echo "Tidak ada perubahan yang perlu dipush."
          fi

      - name: Upload Renamed Articles Artifact
        if: env.HAS_PUBLISHED_FILES == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: renamed-articles
          path: ${{ github.workspace }}

  build:
    name: Build Jekyll
    if: env.HAS_PUBLISHED_FILES == 'true'
    runs-on: ubuntu-latest
    needs: check_draft_articles
    steps:
      - uses: actions/checkout@v3
      - name: Build the site in the jekyll/builder container
        run: |
          export JEKYLL_VERSION=4.0
          docker run \
          -v ${{ github.workspace }}:/srv/jekyll -v ${{ github.workspace }}/_site:/srv/jekyll/_site \
          -e PAGES_REPO_NWO=${{ github.repository }} \
          jekyll/builder:$JEKYLL_VERSION /bin/bash -c "chmod 777 /srv/jekyll && jekyll build --future"

  apply:
    if: env.HAS_PUBLISHED_FILES == 'true'
    runs-on: ubuntu-latest
    needs: build
    permissions:
        contents: read
        pages: write
        id-token: write
    concurrency:
        group: "pages"
        cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Renamed Articles Artifact
        uses: actions/download-artifact@v3
        with:
          name: renamed-articles
          path: ${{ github.workspace }}  
      - name: Setup Ruby
        uses: ruby/setup-ruby@8575951200e472d5f2d95c625da0c7bec8217c42
        with:
          ruby-version: '3.1'
          bundler-cache: true
          cache-version: 0
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2

  deploy:
    if: env.HAS_PUBLISHED_FILES == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    permissions:
        contents: read
        pages: write
        id-token: write
    concurrency:
        group: "pages"
        cancel-in-progress: false
    needs: apply
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3
