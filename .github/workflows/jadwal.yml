# .github/workflows/schedule_publish.yml
name: Scheduled Publish

on:
  schedule:
    - cron: '0 * * * *'  # Jalankan setiap jam
  workflow_dispatch:  # Memungkinkan menjalankan secara manual

jobs:
  publish_drafts:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install dependencies
      run: npm install date-fns

    - name: Publish Scheduled Files
      env:
        TZ: Asia/Makassar  # Mengatur zona waktu Asia/Makassar (+0800)
      run: |
        CURRENT_DATE=$(date '+%Y-%m-%d %H:%M:%S')
        
        # Inisialisasi counter untuk laporan
        COUNT_FUTURE=0
        COUNT_READY=0
        
        # Loop untuk memeriksa setiap file di `_drafts` dan `_draftsamp`
        for DIR in "_drafts" "_draftsamp"; do
          for FILE in $DIR/*.md; do
            # Lewati jika tidak ada file
            [ -e "$FILE" ] || continue
            
            # Ambil `date` dari file
            SCHEDULED_DATE=$(grep "^date: " "$FILE" | sed "s/date: '\(.*\) +0800'/\1/")
            
            # Ubah tanggal ke timestamp untuk perbandingan
            SCHEDULED_TIMESTAMP=$(date -d "$SCHEDULED_DATE" +%s)
            CURRENT_TIMESTAMP=$(date -d "$CURRENT_DATE" +%s)
            
            # Jika file sudah siap dipublish
            if [ "$CURRENT_TIMESTAMP" -ge "$SCHEDULED_TIMESTAMP" ]; then
              # Tentukan direktori tujuan
              if [ "$DIR" == "_drafts" ]; then
                NEW_DIR="_artikel"
              elif [ "$DIR" == "_draftsamp" ]; then
                NEW_DIR="_amp"
              fi
              
              # Buat direktori baru jika belum ada
              mkdir -p "$NEW_DIR"
              
              # Pindahkan file ke direktori baru
              NEW_PATH="${NEW_DIR}/$(basename "$FILE")"
              mv "$FILE" "$NEW_PATH"
              echo "Published: $FILE -> $NEW_PATH"
              
              # Tambah counter untuk file yang siap dipublish
              COUNT_READY=$((COUNT_READY + 1))
            else
              # Tambah counter untuk file yang dijadwalkan di masa mendatang
              COUNT_FUTURE=$((COUNT_FUTURE + 1))
            fi
          done
        done

        # Tampilkan laporan di log
        echo "$COUNT_FUTURE file memiliki jadwal di masa mendatang."
        echo "$COUNT_READY file memiliki jadwal untuk segera dipublish."

    - name: Commit and Push Changes
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add -A
        git commit -m "Auto-publish scheduled files"
        git push
      # Hanya push jika ada perubahan
      if: success() && steps.publish_drafts.outputs.changes
