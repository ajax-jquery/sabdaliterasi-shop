name: Jadwal Produk

on:
  schedule:
    - cron: '10 1 * * *'  # 09.00 WITA
    - cron: '10 7 * * *'  # 15.00 WITA
    - cron: '10 10 * * *' # 18.00 WITA
  push:
    paths:
      - 'update.txt'
      - '_draftsproduk/*'
  workflow_dispatch:

jobs:
  check_draft_produk:
    runs-on: ubuntu-latest

    outputs:
      has_published_files: ${{ steps.set_publish_status.outputs.has_published_files }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: app/jadwal
        run: npm install

      - name: Periksa Jadwal
        id: publish_files
        env:
          TZ: Asia/Makassar
        run: |
          CURRENT_DATE=$(date +"%Y-%m-%d %H:%M:%S %z")
          # Definisikan waktu saat ini
          CURRENT_DATE=$(date +"%Y-%m-%d %H:%M:%S %z")
          echo -e "\n\033[1;34mWaktu sekarang:\033[0m $CURRENT_DATE\n"

          # Variabel untuk menyimpan jumlah file terpublish dan terjadwal
          drafts_publish_count=0
          drafts_schedule_count=0
          draftsamp_publish_count=0
          draftsamp_schedule_count=0

          # Fungsi untuk memeriksa dan memindahkan file jika waktu sesuai
          move_file_if_scheduled() {
            local src_file="$1"
            local dest_folder="$2"
            local date_in_file=$(grep "date: '" "$src_file" | awk -F"'" '{print $2}')
            
            # Bandingkan waktu dalam file dengan waktu saat ini
            if [[ "$date_in_file" < "$CURRENT_DATE" ]] || [[ "$date_in_file" == "$CURRENT_DATE" ]]; then
              # Pindahkan file ke folder tujuan
              if [[ "$dest_folder" == "_posts" ]]; then
                dest_file=$(echo "$src_file" | sed "s|_draftsproduk/|_posts/|")
                drafts_publish_count=$((drafts_publish_count + 1))
              elif [[ "$dest_folder" == "_postsamp" ]]; then
                dest_file=$(echo "$src_file" | sed "s|_draftsprodukamp/|_postsamp/|")
                draftsamp_publish_count=$((draftsamp_publish_count + 1))
              fi
              mkdir -p "$(dirname "$dest_file")"
              mv "$src_file" "$dest_file"
              echo -e "\033[1;32mFile $src_file dipindahkan ke $dest_file (Terpublish)\033[0m $date_in_file"
            else
              if [[ "$dest_folder" == "_posts" ]]; then
                drafts_schedule_count=$((drafts_schedule_count + 1))
              elif [[ "$dest_folder" == "_postsamp" ]]; then
                draftsamp_schedule_count=$((draftsamp_schedule_count + 1))
              fi
              echo -e "\033[38;2;214;0;0mFile $src_file dijadwalkan untuk masa mendatang:\033[0m $date_in_file"
            fi
          }

          # Laporan terpisah untuk folder _draftsproduk
          echo -e "\033[1;34mMemeriksa folder _draftsproduk:\033[0m"
          for file in _draftsproduk/*.md; do
            [ -e "$file" ] || continue
            move_file_if_scheduled "$file" "_posts"
          done

          # Laporan akhir untuk folder _draftsproduk
          echo -e "\033[1;32mTotal file terpublish di _draftsproduk: $drafts_publish_count\033[0m"
          echo -e "\033[1;33mTotal file terjadwal di masa depan di _draftsproduk: $drafts_schedule_count\033[0m"

          # Laporan terpisah untuk folder _draftsprodukamp
          echo -e "\033[1;34mMemeriksa folder _draftsprodukamp:\033[0m"
          for file in _draftsprodukamp/*.md; do
            [ -e "$file" ] || continue
            move_file_if_scheduled "$file" "_postsamp"
          done

          # Laporan akhir untuk folder _draftsprodukamp
          echo -e "\033[1;32mTotal file terpublish di _draftsprodukamp: $draftsamp_publish_count\033[0m"
          echo -e "\033[1;33mTotal file terjadwal di masa depan di _draftsprodukamp: $draftsamp_schedule_count\033[0m"

          # Memastikan isi folder tujuan setelah pemindahan
          echo -e "\033[1;36mIsi folder _posts setelah pemindahan:\033[0m"
          ls -l _posts || echo "_posts folder is empty."

          echo -e "\033[1;36mIsi folder _postsamp setelah pemindahan:\033[0m"
          ls -l _postsamp || echo "_postsamp folder is empty."

          if (( drafts_publish_count > 0 || draftsamp_publish_count > 0 )); then
            echo "HAS_PUBLISHED_FILES=true" >> $GITHUB_ENV
          else
            echo "HAS_PUBLISHED_FILES=false" >> $GITHUB_ENV
          fi
          
      - name: Verify Folder Contents Before Upload
        run: |
            echo "Checking _posts folder contents:"
            ls -la ${{ github.workspace }}/_posts || echo "_posts folder not found or empty."
            echo "Checking _postsamp folder contents:"
            ls -la ${{ github.workspace }}/_postsamp || echo "_postsamp folder not found or empty."

      - name: Set Publish Status
        id: set_publish_status
        run: |
          echo "::set-output name=has_published_files::${{ env.HAS_PUBLISHED_FILES }}"

      - name: Commit and Push Changes
        if: env.HAS_PUBLISHED_FILES == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git status
          if [ -n "$(git status --porcelain)" ]; then
            # Konfigurasi Git untuk commit menggunakan GitHub Actions bot
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            
            # Menarik perubahan terbaru tanpa menggabungkannya (fetch)
            git fetch origin master
            
            # Mencoba untuk merge perubahan terbaru ke dalam branch lokal
            git merge origin/master || { echo "Gagal melakukan merge"; exit 1; }

            # Tambahkan dan commit perubahan
            git add .
            git commit -m "Publish scheduled articles"
            
            # Push perubahan ke remote
            git push origin master || { echo "Gagal melakukan push"; exit 1; }
            echo "Perubahan berhasil dicommit dan dipush."
          else
            echo "Tidak ada perubahan yang perlu dipush."
          fi

          
      - name: List All Files in Workspace
        run: ls -R ${{ github.workspace }}

      - name: List Files in _posts and _postsamp
        run: |
          echo "Files in _posts:"
          ls -R ${{ github.workspace }}/_posts
          echo "Files in _postsamp:"
          ls -R ${{ github.workspace }}/_postsamp

      - name: Upload Renamed Articles Artifact
        if: env.HAS_PUBLISHED_FILES == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: renamed-articles
          path: |
            ${{ github.workspace }}/_posts/*
            ${{ github.workspace }}/_postsamp/*
          if-no-files-found: warn
