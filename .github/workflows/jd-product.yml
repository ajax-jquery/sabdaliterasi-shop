name: Jadwal Produk

on:
  schedule:
    - cron: '10 1 * * *'  # 09.00 WITA
    - cron: '10 7 * * *'  # 15.00 WITA
    - cron: '10 10 * * *' # 18.00 WITA
  push:
    paths:
      - 'update.txt'
      - '_draftsprodukproduk/*'
  workflow_dispatch:

jobs:
  check_draft_product:
    runs-on: ubuntu-latest

    outputs:
      has_published_files: ${{ steps.set_publish_status.outputs.has_published_files }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: app/jadwal
        run: npm install

      - name: Periksa Jadwal
        id: publish_files
        env:
          TZ: Asia/Makassar
        run: |
          CURRENT_DATE=$(date +"%Y-%m-%d %H:%M:%S %z")
          # Definisikan waktu saat ini
          CURRENT_DATE=$(date +"%Y-%m-%d %H:%M:%S %z")
          echo -e "\n\033[1;34mWaktu sekarang:\033[0m $CURRENT_DATE\n"

          # Variabel untuk menyimpan jumlah file terpublish dan terjadwal
          drafts_publish_count=0
          drafts_schedule_count=0
          draftsamp_publish_count=0
          draftsamp_schedule_count=0

          # Fungsi untuk memeriksa dan memindahkan file jika waktu sesuai
          move_file_if_scheduled() {
            local src_file="$1"
            local dest_folder="$2"
            local date_in_file=$(grep "date: '" "$src_file" | awk -F"'" '{print $2}')
            
            # Bandingkan waktu dalam file dengan waktu saat ini
            if [[ "$date_in_file" < "$CURRENT_DATE" ]] || [[ "$date_in_file" == "$CURRENT_DATE" ]]; then
              # Pindahkan file ke folder tujuan
              if [[ "$dest_folder" == "_posts" ]]; then
                dest_file=$(echo "$src_file" | sed "s|_draftsproduk/|_posts/|")
                drafts_publish_count=$((drafts_publish_count + 1))
              elif [[ "$dest_folder" == "_postsamp" ]]; then
                dest_file=$(echo "$src_file" | sed "s|_draftsprodukamp/|_postsamp/|")
                draftsamp_publish_count=$((draftsamp_publish_count + 1))
              fi
              mkdir -p "$(dirname "$dest_file")"
              mv "$src_file" "$dest_file"
              echo -e "\033[1;32mFile $src_file dipindahkan ke $dest_file (Terpublish)\033[0m $date_in_file"
            else
              if [[ "$dest_folder" == "_posts" ]]; then
                drafts_schedule_count=$((drafts_schedule_count + 1))
              elif [[ "$dest_folder" == "_postsamp" ]]; then
                draftsamp_schedule_count=$((draftsamp_schedule_count + 1))
              fi
              echo -e "\033[38;2;214;0;0mFile $src_file dijadwalkan untuk masa mendatang:\033[0m $date_in_file"
            fi
          }

          # Laporan terpisah untuk folder _draftsproduk
          echo -e "\033[1;34mMemeriksa folder _draftsproduk:\033[0m"
          for file in _draftsproduk/*.md; do
            [ -e "$file" ] || continue
            move_file_if_scheduled "$file" "_posts"
          done

          # Laporan akhir untuk folder _draftsproduk
          echo -e "\033[1;32mTotal file terpublish di _draftsproduk: $drafts_publish_count\033[0m"
          echo -e "\033[1;33mTotal file terjadwal di masa depan di _draftsproduk: $drafts_schedule_count\033[0m"

          # Laporan terpisah untuk folder _draftsprodukamp
          echo -e "\033[1;34mMemeriksa folder _draftsprodukamp:\033[0m"
          for file in _draftsprodukamp/*.md; do
            [ -e "$file" ] || continue
            move_file_if_scheduled "$file" "_postsamp"
          done

          # Laporan akhir untuk folder _draftsprodukamp
          echo -e "\033[1;32mTotal file terpublish di _draftsprodukamp: $draftsamp_publish_count\033[0m"
          echo -e "\033[1;33mTotal file terjadwal di masa depan di _draftsprodukamp: $draftsamp_schedule_count\033[0m"

          # Memastikan isi folder tujuan setelah pemindahan
          echo -e "\033[1;36mIsi folder _posts setelah pemindahan:\033[0m"
          ls -l _posts || echo "_posts folder is empty."

          echo -e "\033[1;36mIsi folder _postsamp setelah pemindahan:\033[0m"
          ls -l _postsamp || echo "_postsamp folder is empty."

          if (( drafts_publish_count > 0 || draftsamp_publish_count > 0 )); then
            echo "HAS_PUBLISHED_FILES=true" >> $GITHUB_ENV
          else
            echo "HAS_PUBLISHED_FILES=false" >> $GITHUB_ENV
          fi
          
      - name: Verify Folder Contents Before Upload
        run: |
            echo "Checking _posts folder contents:"
            ls -la ${{ github.workspace }}/_posts || echo "_posts folder not found or empty."
            echo "Checking _postsamp folder contents:"
            ls -la ${{ github.workspace }}/_postsamp || echo "_postsamp folder not found or empty."

      - name: Set Publish Status
        id: set_publish_status
        run: |
          echo "::set-output name=has_published_files::${{ env.HAS_PUBLISHED_FILES }}"

      - name: Commit and Push Changes
        if: env.HAS_PUBLISHED_FILES == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git status
          if [ -n "$(git status --porcelain)" ]; then
            # Konfigurasi Git untuk commit menggunakan GitHub Actions bot
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            
            # Menarik perubahan terbaru tanpa menggabungkannya (fetch)
            git fetch origin master
            
            # Mencoba untuk merge perubahan terbaru ke dalam branch lokal
            git merge origin/master || { echo "Gagal melakukan merge"; exit 1; }

            # Tambahkan dan commit perubahan
            git add .
            git commit -m "Publish scheduled articles"
            
            # Push perubahan ke remote
            git push origin master || { echo "Gagal melakukan push"; exit 1; }
            echo "Perubahan berhasil dicommit dan dipush."
          else
            echo "Tidak ada perubahan yang perlu dipush."
          fi

          
      - name: List All Files in Workspace
        run: ls -R ${{ github.workspace }}

      - name: List Files in _posts and _postsamp
        run: |
          echo "Files in _posts:"
          ls -R ${{ github.workspace }}/_posts
          echo "Files in _postsamp:"
          ls -R ${{ github.workspace }}/_postsamp

      - name: Upload Renamed Articles Artifact
        if: env.HAS_PUBLISHED_FILES == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: renamed-articles
          path: |
            ${{ github.workspace }}/_posts/*
            ${{ github.workspace }}/_postsamp/*
          if-no-files-found: warn


  build:
    name: Build Jekyll
    if: needs.check_draft_product.outputs.has_published_files == 'true'
    runs-on: ubuntu-latest
    needs: check_draft_product
    steps:
      - uses: actions/checkout@v3
      - name: Build the site in the jekyll/builder container
        run: |
          export JEKYLL_VERSION=4.0
          docker run \
          -v ${{ github.workspace }}:/srv/jekyll -v ${{ github.workspace }}/_site:/srv/jekyll/_site \
          -e PAGES_REPO_NWO=${{ github.repository }} \
          jekyll/builder:$JEKYLL_VERSION /bin/bash -c "chmod 777 /srv/jekyll && jekyll build --future"

  apply:
    if: needs.check_draft_product.outputs.has_published_files == 'true'
    runs-on: ubuntu-latest
    needs: build
    permissions:
        contents: read
        pages: write
        id-token: write
    concurrency:
        group: "pages"
        cancel-in-progress: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download Renamed Articles Artifact
        uses: actions/download-artifact@v3
        with:
          name: renamed-articles
          path: ${{ github.workspace }}  
      - name: Setup Ruby
        uses: ruby/setup-ruby@8575951200e472d5f2d95c625da0c7bec8217c42
        with:
          ruby-version: '3.1'
          bundler-cache: true
          cache-version: 0
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2

  deploy:
    if: needs.check_draft_product.outputs.has_published_files == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    permissions:
        contents: read
        pages: write
        id-token: write
    concurrency:
        group: "pages"
        cancel-in-progress: false
    needs: apply
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3
        
  SendMail:
    if: needs.check_draft_product.outputs.has_published_files == 'true'
    needs: deploy
    runs-on: ubuntu-latest  # Menjalankan workflow di sistem operasi Ubuntu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3  # Mengambil kode dari repositori

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Menggunakan versi Node.js 16, Anda bisa sesuaikan dengan versi yang diinginkan

      - name: Install dependencies
        working-directory: app/sendmail
        run: |
          npm install  # Menginstal dependensi yang ada di package.json
          
      - name: Run the Node.js script
        working-directory: app/sendmail
        run: |
          node server.js  # Menjalankan skrip utama Node.js Anda (sesuaikan dengan path file skrip)
        env:
          SERVICE: ${{ secrets.SERVICE }}
          EMAIL_USER: ${{ secrets.EMAIL_USER }}
          EMAIL_PASS: ${{ secrets.EMAIL_PASS }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_REPO: ${{ secrets.GH_REPO }}
          GITHUB_FILE_PATH: ${{ secrets.GH_FILE_PATH }}
          GITHUB_BRANCH: ${{ secrets.GH_BRANCH }}
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.EMAIL_FIREBASE_AUTH_DOMAIN }}
          FIREBASE_DATABASE_URL: ${{ secrets.FIREBASE_DATABASE_URL }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_PRIVATE_KEY: ${{ secrets.FIREBASE_PRIVATE_KEY }}
          FIREBASE_CLIENT_EMAIL: ${{ secrets.FIREBASE_CLIENT_EMAIL }}
          FIREBASE_AUTH_URI: ${{ secrets.FIREBASE_AUTH_URI }}
          FIREBASE_TOKEN_URI: ${{ secrets.FIREBASE_TOKEN_URI }}
          FIREBASE_PRIVATE_KEY_ID: ${{ secrets.FIREBASE_PRIVATE_KEY_ID }}
          FIREBASE_CLIENT_ID: ${{ secrets.FIREBASE_CLIENT_ID }}
          FIREBASE_AUTH_PROVIDER_X509_CERT_URL: ${{ secrets.FIREBASE_AUTH_PROVIDER_X509_CERT_URL }}
          FIREBASE_CLIENT_X509_CERT_URL: ${{ secrets.FIREBASE_CLIENT_X509_CERT_URL }}
          FIREBASE_LASTSENT: ${{ secrets.FIREBASE_LASTSENT }}
          FIREBASE_SUBSCRIBER: ${{ secrets.FIREBASE_SUBSCRIBER }}
          EMAIL_SECURE: ${{ secrets.EMAIL_SECURE }}
          EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}      

  RSS_post_to_Twitter:
    if: needs.check_draft_product.outputs.has_published_files == 'true'
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16' # Sesuaikan dengan versi Node.js yang Anda gunakan

      - name: Install dependencies
        working-directory: app/post-twitter
        run: |
          npm install  # Menginstal dependensi yang ada di package.json
          
      - name: Run server.js to post on Twitter
        working-directory: app/post-twitter
        run: |
          node server.js
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}  # GitHub Token untuk akses API
          TWITTER_API_KEY: ${{ secrets.TWITTER_API_KEY }}
          TWITTER_API_SECRET: ${{ secrets.TWITTER_API_SECRET }}
          TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_SECRET: ${{ secrets.TWITTER_ACCESS_SECRET }}
